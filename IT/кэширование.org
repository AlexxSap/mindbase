#+title: Кэширование

[[https://www.youtube.com/watch?v=iLMlYgQoTIE][ссылка на видео]]

* Зачем кэшировать
+ Сокращение времени отклика
+ Снижение нагрузки на сервисы
+ Переиспользование ранее полученных или вычесленных данных
+ Стабилизация работы при кратковременных сбоях
+ =НО= нужно держать нагрузку без кэша, он для ускорения ответа, а не для возможности работы.

* Термины
+ =cache miss= - промах, нужный ключ не найден
+ =cache hit= - попадание, нужный ключ найден
+ =hit ratio= - процент попаданий
+ =горячий ключ= - ключ на который приходится бОльшая часть запросов
+ =прогрев кэша= - наполнение кэша данными
+ =инвалидация= - удаление неактуальных данных из кэша

* Что нужно кэшировать, а что не нужно
+ Если данные меняются часто, то кэшировать их не нужно
+ если данные меняются редко, то нужно закэшировать
+ можно кэшировать ошибки и кэш-промахи

* Всегда ли кэшировать полезно
Можно вычислить эффективность кэша
#+begin_quote
AverageTime = DBAccessTime * CacheMissRate + CacheAccessTime
#+end_quote

* Виды кэширования по расположению
** Внутреннее
Кэш расположен внутри приложения, как данные в ОП.
"+":
- высокая скорость
- нет сетевых запросов
- нет расходов на маршалинг
"-":
- горизонтальное масштабирование
- прогрев кэша после падения

** Внешнее
Кэш на внешнем сервисе
"+":
- можно хранить большие объёмы
- простое горизонтальное масштабирование
- кэш не теряется после падения
- простой прогрев и простая логика инвалидации
"-":
- скорость работы
* Способы взаимодействия с кэшем
** cache aside
Приложение само координирует запросы в кэш и решает куда и когда обращаться.
*** Чтение
+------+                      +-------+
|      | 1. чтение из кэша    |       |
|  A   | -------------------> |   C   |
|  P   | 2. даные не нашли    |   A   |
|  P   | <------------------- |   C   |
|  L   | 5. обновили кэш      |   H   |
|  I   | -------------------> |   E   |
|  C   |                      +-------+
|  A   |
|  T   |                      +-------+
|  I   | 3. читаем из БД      |       |
|  O   | -------------------> |   D   |
|  N   | 4. получаем данные   |   B   |
|      | <------------------- |       |
+------+                      +-------+

*** Запись
+------+                      +-------+
|  A   | 3. Обн. кэша         | CACHE |
|  P   | -------------------> |       |
|  P   |                      +-------+
|  L   |
|      | 1. Сохраняем в базу  +-------+
|      | -------------------> |       |
|      | 2. Получаем ответ    |  DB   |
|      | <------------------- |       |
+------+                      +-------+

** cache through
Сквозное кэширование - все запосы приложения проходят через кэш

+-----+                    +-----+                            +-----+
|  A  | 1.читаем из кэша   |  C  | 2. если нет, читаем из БД  |     |
|     | -----------------> |  A  | -------------------------> |  B  |
|  P  |                    |  C  |                            |  D  |
|  L  | 4. отдаём данные   |  H  | 3. сохраняем данные в кэш  |     |
|     | <----------------- |  E  | <------------------------- |     |
+-----+                    +-----+                            +-----+

"+": сервис работает только с кэшем
"-": если кэш упадёт - то приложение не работает
** cache ahead
Опережающее кэширование. Запросы на чтение всегда идут только в кэш, никогда не попадая в БД напрямую.
