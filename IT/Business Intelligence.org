#+title: Business Intelligence

* Что такое BI
=Business Intelligence= (=BI=) – это комплекс методов и компьютерных инструментов для сбора, хранения, обработки и визуализации данных, которые превращают транзакционную информацию в наглядные отчеты​.

=Главная цель= BI – выделять ключевые метрики и тренды, помогать моделировать альтернативные сценарии и своевременно реагировать на изменения бизнеса​.
BI-системы позволяют принимать как оперативные, так и стратегические решения, объединяя внутренние (финансовые, CRM) и внешние (рынок, конкуренты) данные для полной картины происходящего​.

* Архитектура BI-систем
Типичная архитектура =BI= состоит из нескольких уровней​:
- =Источники данных=
  транзакционные БД (OLTP), файлы (CSV/Excel), CRM/ERP, веб-сервисы и т.д.

- =ETL/ELT=
  процессы Extract–Transform–Load (Извлечение - Преобразование - Загрузка) для извлечения и преобразования данных. ETL-инструменты (Informatica, SSIS и др.) загружают данные в хранилище, выполняя очистку и агрегацию (конечно не без помощи аналитика, который эту настройку производит).

- =Хранилище данных= (=DWH=)
  централизованная база, оптимизированная для отчетности​. Здесь хранятся исторические данные и организованы они по схеме «звезда» или «снежинка»: фактовая таблица (продажи, транзакции) связана с таблицами измерений (время, продукт, регион)​. Такая структура позволяет быстро агрегировать показатели по разным признакам.

- =OLAP-сервер=
  многомерное хранилище (куб) для аналитики.
  =OLAP= (Online Analytical Processing) - технология многомерного анализа данных, оптимизированная для быстрого выполнения сложных аналитических запросов и построения отчётов. OLAP-куб – это многомерный разреженный массив данных с измерениями (Dimensions) и мерами (Measures)​. В кубе данные предварительно агрегируются, что обеспечивает сверхбыстрый ответ на запросы. Сервер может быть MOLAP (хранит и анализирует данные «своим» образом) или ROLAP (строит OLAP поверх реляционной СУБД)​.

- =Бизнес-аналитика=
  BI-платформа (Power BI, Tableau, Qlik, Luxms BI, Visiology и др.) – уровень представления. Она обеспечивает визуализацию, построение дашбо рдов, отчётов и работу аналитиков с подготовленными данными.

* Источники данных и интеграция
=BI-системы= поддерживают интеграцию с любыми данными: реляционными СУБД, NoSQL и Hadoop, облачными сервисами, файлами, веб-API и т.д.
Интеграция может быть =пакетной= (по расписанию) или в =режиме реального времени= (через стриминги типа Kafka).
Многие инструменты предоставляют готовые коннекторы (ODBC/JDBC, REST, специфичные для CRM и ERP) и визуальные ETL-пайплайны.
Современные решения (например, Yandex DataLens) позволяют задавать трансформации через SQL или встроенные конструкторы. При ELT-подходе сырые данные сначала загружаются в «озеро данных» или промежуточную БД, а затем преобразуются средствами СУБД.
Поддерживаются и гибридные схемы: часть данных хранится в облаке, часть – в локальном DWH, а аналитика объединяет их на лету.

* Хранилища данных и OLAP-кубы
=Хранилище данных= (=DWH=) – это специализированная БД для аналитики и отчётности​.
Как правило, DWH построено по реляционной модели со схемами «звезда» или «снежинка» (как писал ранее)​.
«Звезда» имеет одну фактовую таблицу и множество денормализованных измерений, «снежинка» дополняется нормализованными подтаблицами. В фактовой таблице лежат массивы (продажи, расчёты и т.д.), а таблицы измерений описывают бизнес-показатели. С DWH связаны витрины данных – проекции под конкретные отделы.

Для высокопроизводительного анализа строят =OLAP-кубы=: многомерные структуры, где данные сгруппированы по измерениям и предагрегированы​. Куб позволяет задавать запросы (например, «продажи по месяцам, товарам и регионам») и быстро получать ответы благодаря многомерному представлению.
Если куб не используется, применяются =ROLAP=-решения, генерирующие сложные SQL-запросы (так называемый многопроходный SQL). OLAP-серверы обеспечивают быструю фильтрация и сложные свертки: ведь фактовые таблицы многомерных кубов формируют меры, значения которых заранее агрегированы по иерархиям​.

* Что такое OLAP-сервер и в чем различия
=MOLAP= (=Multidimensional OLAP=) и =ROLAP= (=Relational OLAP=) — две архитектуры OLAP-систем для многомерного анализа данных. Главное отличие в том, где и как хранятся и агрегируются данные.

=MOLAP=
Хранилище
- Специализированный «куб», в котором заранее предагрегированы все сочетания измерений.
Производительность
- Сверхбыстрые ответы на запросы благодаря предвычислению и хранению данных в компактном виде (часто сжатом).
Язык запросов
- Чаще всего MDX (Multidimensional Expressions) или собственные API вендора куба.
Преимущества
- Очень высокая скорость аналитических запросов.
- Низкая нагрузка на базу.
Ограничения
Долго строится куб (особенно при большом числе измерений и высоком кардинале).
Меньшая гибкость: сложно динамически добавлять новые измерения или меры «на лету».
Размер куба может расти экспоненциально с числом измерений.

=ROLAP=
Хранилище
- Обычная реляционная СУБД (например, PostgreSQL, Oracle, MS SQL) с «звёздной» или «снежинкообразной» схемами.
Производительность
- Запросы превращаются в сложные SQL-выражения, выполняемые «на лету»; скорость зависит от оптимизации БД, индексов и мощности сервера.
Язык запросов
- SQL (или генерируемый системой SQL на основе MDX/DAX-запроса), иногда с расширениями.
Преимущества
- Гибкость: легко добавлять новые измерения и меры, изменять схему без перестройки «куба».
- Нет дублирования данных (используется уже существующий DWH).
- Меньше накладных расходов на предагрегацию.
Ограничения
- Более высокие времена ответа на сложные свёртки и Drill-Down (если нет дополнительных оптимизаций).
- Большая нагрузка на реляционную базу при выполнении тяжёлых аналитических запросов.

=Когда и что выбирать=
=MOLAP= подходит, если
- Основные аналитические отчёты сформированы заранее и редко меняются.
- Критична максимальная скорость отклика даже на сложные свёртки.
- Объёмы (и число измерений) укладываются в возможность куба.
=ROLAP= подходит, если
- Схема данных часто эволюционирует, добавляются новые поля или источники.
- Нужно опираться на уже имеющийся DWH и минимизировать дублирование.
- Допустима чуть более медленная, но гибкая аналитика.

*  Языки запросов
BI-платформы используют разные языки для выборки и расчёта данных.
Основные из них:
- =SQL=
  стандартный язык работы с реляционными СУБД. Пример простого запроса:
#+begin_src sql
SELECT Region, SUM(Sales) AS TotalSales
FROM sales_data
WHERE SaleDate BETWEEN '2023-01-01' AND '2023-06-30'
GROUP BY Region;
#+end_src
Он собирает сумму продаж по регионам за первое полугодие.

- =DAX= (=Data Analysis Expressions=)
  формульный язык Microsoft Power BI и SSAS Tabular для создания мер и KPI.
  Пример создания меры «Total Sales»:
#+begin_src dax
-- Мера общей суммы продаж
TotalSales = SUM('Sales'[Amount])
#+end_src
Или динамическая мера Profit = SUM('Sales'[Revenue]) - SUM('Sales'[Cost]). DAX позволяет рассчитывать значения с учётом контекста (фильтров в отчете) и имеет множество функций для аналитики.

- =MDX= (=Multidimensional Expressions=)
  используется для запросов к OLAP-кубам (SSAS, Oracle OLAP и др.). Пример запроса к кубу продаж:
#+begin_src
SELECT
  {[Measures].[Sales]} ON COLUMNS,
  {[Date].[Year].[2023], [Date].[Year].[2024]} ON ROWS
FROM [SalesCube];
#+end_src
Это вернёт значения меры Sales по годам 2023 и 2024.

- =Python=
  часто интегрируется для гибкой аналитики и ETL.
  Например, с помощью pandas можно прочесть данные из DWH и сделать анализ:
#+begin_src python
import pandas as pd
# Загружаем данные через SQL-запрос
df = pd.read_sql('SELECT * FROM sales_data', connection)
# Вычисляем новый столбец и сводим по региону
df['RevenueUSD'] = df['Revenue'] * df['Rate_USD']
print(df.groupby('Region')['RevenueUSD'].sum())
#+end_src
Python позволяет делать предобработку, использовать библиотеки машинного обучения или строить кастомные визуализации и в целом расширяет возможности аналитики.

* Визуализация и дашборды
BI-платформы предлагают широкий набор визуализаций:
- графики (линейные, столбчатые, круговые, пузырьковые),
- тепловые карты,
- географические карты,
- графы
- KPI-метрики.

Дашборд собирается из виджетов – диаграмм и таблиц, которые взаимосвязаны фильтрами и параметрами.
Конструкторы дашбордов (Power BI, Tableau, Qlik, Yandex DataLens, Metabase и др.) дают пользователю возможность настройки как ему хочется: бизнес-пользователь без кодинга может формировать отчёт, задавать срезы по времени и сегментам, настраивать оповещения.
Часто реализована древовидная фильтрация, фильтрация по иерархиям (например, от суммы продаж по годам к месяцам и дню). Мобильные клиенты и web-интерфейсы BI-платформ позволяют просматривать дашборды с любых устройств.

* Производительность и масштабируемость
Производительность BI-систем определяется скоростью загрузки и обработки запросов на больших объёмах.
Современные движки ориентированы на in-memory OLAP и колоночные хранилища: они эффективно сжимают данные и параллельно обрабатывают запросы.
Например, Qlik Sense и Tabular (в Power BI) хранят таблицы в памяти и выполняют агрегации очень быстро. Для огромных объёмов используют MPP (Massively Parallel Processing) – распределённую обработку: Amazon Redshift, Azure Synapse, Google BigQuery могут массово параллелить запросы.
Облачные DWH легко масштабируются: добавлением узлов, оперативной памяти или CPU. Как отмечают эксперты, облачные хранилища «быстрее и дешевле масштабировать» благодаря MPP и динамическому провижингу​.

Однако сам факт использования in-memory Olap не гарантирует «неубиваемость» системы​: при сотнях миллионов строк нужны оптимизация и архитектурные решения.
Часто используют гибридные модели (часть данных – кеш, часть – на диске).
Для тяжелых моделей Power BI предлагает смешанный режим с DirectQuery​. В крупных проектах развертывают балансировщики нагрузки или создают реплики аналитических моделей.
Российские специалисты (например, команда Visiology) отмечают, что в пиковых сценариях важно не перегружать платформу: иногда более эффективным, чем добавление мощностей, оказывается оптимизация запросов или изменение структуры модели.

* Российские vs зарубежные BI-решения
Рынок BI представлен как зарубежными, так и российскими продуктами.
Среди мировых лидеров – =Microsoft Power BI=, =Tableau=, =Qlik Sense=, а также =Metabase= и =Apache Superset= (open-source).
Power BI популярен благодаря глубокой интеграции с экосистемой Microsoft, гибкой модели лицензирования по пользователю и мощному DAX​.
Tableau ценится за интуитивный drag&drop-интерфейс и разнообразные визуализации.
Qlik Sense известен ассоциативным движком и возможностями быстрой подготовки данных.
Оpen-source платформы (Metabase, Superset) бесплатны, просты в настройке и подойдут стартапам или подразделениям, стремящимся минимизировать лицензии.

Российские BI-системы активно развиваются, особенно в контексте импортозамещения.
Из заметных игроков: =Yandex DataLens= – облачный сервис BI от Яндекса, который позволяет быстро строить графики и дашборды, подключать разные источники и выполнять вычисления через SQL-подобный язык​. Он интегрирован с Yandex Cloud и предлагает бесплатный тариф и расширенные опции (SSO, приватные среды).
=Luxms BI= – платформа для крупных предприятий с акцентом на безопасность и соответствие российским стандартам (есть лицензия ФСТЭК)​.
=Visiology= – in-memory BI для больших данных, с задачей «быстро и эффективно решать задачи с петабайтами».
=Polymatica= (SL Soft) – решает мультипликативный OLAP, отмечается возможностью сжатия данных в 12 раз и загрузки до 500 000 записей в секунду​, что делает систему пригодной для петабайтных объёмов.
Многие российские решения усиливают поддержку отечественных СУБД, внедряют ETL на базе Apache Airflow или собственной разработки, а также предоставляют «из коробки» интеграцию с 1С, «Альт» и другими локальными продуктами.

* BI системы для непрограммистов, гибридные модели, лицензирование и open-source
Отдельно стоит отметить =Self-Service BI= – подход, когда аналитики и бизнес-пользователи сами готовят отчёты.
Такие инструменты (Power BI Desktop, Qlik Sense, Metabase) предоставляют интуитивные конструкторы и не требуют наличие программистов.
Гибридные модели сочетают локальные и облачные ресурсы: например, корпоративный DWH может оставаться в дата-центре, а визуализация – в облаке. Это удобно при постепенной миграции в облако или работе с чувствительными данными.

По лицензированию лидируют смешанные подходы: многие зарубежные BI переходят на SaaS с оплатой по подписке, отечественные часто предлагают пожизненную лицензию + годовую поддержку.
Power BI в линейке Microsoft – подписка per-user, а Tableau – лицензирование по числу серверов/юзеров.
Open-source платформы (Metabase, Superset, Redash, Apache Kylin) бесплатны, но требуют самостоятельного администрирования. Они хороши для прототипов и отделов, не готовых тратиться на лицензию.

В итоге выбор BI-системы зависит от задач организации: требуются ли жесткая безопасность (сертифицированные решения типа Luxms или Power BI Premium в Azure), упор на визуализацию (Tableau) или стоимость (open-source BI), нужна ли мощная интеграция с локальными сервисами (российские платформы) или глобальная экосистема (Microsoft/Google/Amazon).
Правильная архитектура (ETL→DWH→OLAP→дашборды) и понимание возможностей BI позволят извлечь максимум из данных и сделать аналитику эффективным инструментом управления бизнеса.
