#+title: Mvcc

=MVCC= (Multi-Version Concurrency Control) — это механизм управления параллельностью, используемый в базах данных для обеспечения консистентности , изолированности и производительности при работе с транзакциями.
=MVCC= позволяет нескольким пользователям или процессам одновременно читать и писать данные без блокировки, минимизируя конфликты между транзакциями.
Хотя реализация =MVCC= требует дополнительных ресурсов для хранения версий, его преимущества делают его популярным выбором для многих систем управления базами данных.

* Основная идея MVCC
=MVCC= работает за счет создания нескольких версий каждой записи (строки) в базе данных. Когда происходит обновление или удаление записи, вместо модификации существующей строки создается новая версия этой строки, а старая версия сохраняется до тех пор, пока она нужна для выполнения других транзакций.

Это позволяет:
- Читающим транзакциям видеть "старую" версию данных, которая была актуальна на момент начала их работы.
- Пишущим транзакциям создавать новые версии данных, не мешая чтению другими транзакциями.

Таким образом, =MVCC= избегает необходимости использовать блокировки для чтения (read locks), что значительно улучшает производительность системы.

* Как работает MVCC?
1. Создание версий записей
   - Когда транзакция изменяет запись, вместо ее непосредственного обновления система создает новую версию этой записи.
   - Старая версия остается доступной для тех транзакций, которые начались раньше.

2. Управление версиями
   Каждая версия записи содержит метаданные, такие как:
   - Timestamp начала транзакции (Transaction Start Timestamp): Указывает, когда запись была создана.
   - Timestamp окончания транзакции (Transaction End Timestamp): Указывает, когда запись была удалена или заменена.
   Эти метаданные помогают системе определить, какие версии записи видимы для каждой транзакции.

3. Видимость данных
   Система решает, какие версии записи видны конкретной транзакции, основываясь на ее собственном timestamp и timestamp записей.
   Например:
   - Если транзакция T1 начала работу до того, как запись была изменена другой транзакцией T2, T1 будет видеть старую версию записи.
   - Если T1 начала работу после изменения записи T2, T1 увидит новую версию.

4. Удаление старых версий
   Старые версии записей сохраняются до тех пор, пока они нужны хотя бы одной активной транзакции.
   После завершения всех транзакций, которые могли использовать старую версию, она удаляется через процесс очистки (например, vacuum в PostgreSQL).

* Преимущества MVCC
- Безблокировка чтения.
  Чтение не блокирует запись, и запись не блокирует чтение. Это особенно важно в системах с высокой нагрузкой.

- Высокая параллельность
  Позволяет многим пользователям или транзакциям работать с данными одновременно, минимизируя конфликты.

- Согласованность
  Каждая транзакция видит согласованное состояние данных, соответствующее моменту ее начала.

- Изолированность
  =MVCC= реализует уровень изолированности "snapshot isolation" или "repeatable read" , что гарантирует, что транзакция видит только те изменения, которые были зафиксированы до ее начала.

* Недостатки MVCC
- Занимает больше места
  Поскольку старые версии записей сохраняются до тех пор, пока они нужны хотя бы одной активной транзакции, требуется больше места для хранения этих версий.

- Очистка старых версий
  Необходим механизм для удаления старых версий записей (например, vacuum в PostgreSQL), что может добавить дополнительную нагрузку на систему.

- Сложность реализации
  Реализация =MVCC= требует сложного управления версиями и метаданными.

* Где используется MVCC?
- Базы данных
  PostgreSQL : Использует MVCC для реализации уровней изолированности транзакций.
  MySQL (InnoDB) : Поддерживает MVCC для уровня изолированности "REPEATABLE READ" и выше.
  Oracle : Также использует MVCC для управления параллельностью.

- NoSQL-системы
  Cassandra : Использует MVCC для управления версиями данных.
  CouchDB : Хранит все версии документа, чтобы обеспечить согласованное чтение.

- Реляционные базы данных
  =MVCC= широко применяется в реляционных СУБД для поддержки многопользовательского доступа без блокировок.

* Уровни изолированности с MVCC
=MVCC= позволяет реализовать различные уровни изолированности транзакций:
- Read Committed
  Каждая транзакция видит только зафиксированные изменения (коммитнутые версии записей).

- Repeatable Read
  Каждая транзакция видит одинаковое состояние данных с момента своего начала, даже если другие транзакции вносят изменения.

- Serializable
  Транзакции выполняются так, как если бы они шли последовательно, без конфликтов.

* Зачем нужен MVCC?
=MVCC= решает несколько ключевых проблем:
- Фантомное чтение
  Без =MVCC= транзакция могла бы видеть новые записи, добавленные после начала своей работы. =MVCC= предотвращает это, предоставляя стабильный снимок данных.

- Неявные блокировки
  =MVCC= устраняет необходимость явных блокировок для чтения, что увеличивает производительность.

- Консистентность
  =MVCC= гарантирует, что каждая транзакция видит согласованное состояние данных.
