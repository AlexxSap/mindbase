#+title: Mongo Crud

* Создание базы
В MongoDB база данных создаётся автоматически при первом обращении к ней (например, при записи данных).
1. Подключитесь к MongoDB
Для начала подключитесь к MongoDB с помощью клиента, например mongosh (MongoDB Shell). Если MongoDB работает локально на стандартном порте 27017, вы попадёте в интерактивный shell.
2. Выберите или создайте базу данных
Чтобы выбрать базу данных, используйте команду =use=. Если база данных не существует, она будет создана автоматически при первой записи данных.
3. Добавьте коллекцию и документ
База данных создаётся автоматически, когда вы добавляете данные.
#+begin_src
// если запускается контейнер
docker run -it -p 28000:27017 --name mongoContainer mongo:latest mongosh
// если контейнер запущен
docker exec -it mongoContainer mongosh
// если без контейнера
mongosh
use myNewDatabase
db.myCollection.insertOne({ name: "John", age: 30 })
#+end_src

4. Проверьте список баз данных
#+begin_src
show dbs
#+end_src
Чтобы проверить, какая база данных выбрана в данный момент, выполните:
#+begin_src
db
#+end_src

* Удаление базы данных
Если вам нужно удалить базу данных, выполните следующие шаги:
#+begin_src
use myNewDatabase
db.dropDatabase()
#+end_src

* Типы данных
Документ (одна запись) не должен быть больше 16 Мб

1. Null
   {"x" : null}
   Нулевой тип можно использовать для обозначения как нулевого значения, так и несуществующего поля
2. Логический тип
   {"x" : true}
   Существует логический тип данных, который можно использовать для значений true и false
3. Число
   {"x" : 3.14}
   {"x" : 3}
   По умолчанию оболочка использует 64-битные числа с плавающей точкой. Таким образом, в оболочке эти числа выглядят «нормально». В случае с целыми числами используйте классы =NumberInt= или =NumberLong=, которые обозначают 4-байтовые или 8-байтовые целые числа со знаком соответственно.
   {"x" : NumberInt ("3")}
   {"x" : NumberLong ("3")}
4. Строка
   {"x" : "foobar"}
   Любая строка символов в кодировке UTF-8 может быть представлена с использованием типа строки
5. Дата
   {"x" : new Date()}
   MongoDB хранит даты в виде 64-битных целых чисел, обозначающих миллисекунды с момента эпохи Unix (1 января 1970 г.). Часовой
пояс не сохраняется
6. Регулярное выражение
   {"x" : / foobar / i}
   Запросы могут использовать регулярные выражения, используя синтаксис регулярных выражений JavaScript
7. Массив
   {"x" : ["a", "b", "c"]}
   Наборы или списки значений могут быть представлены в виде массивов
8. Встраиваемый документ
   {"x" : {"foo": "bar"}}
   Документы могут содержать целые документы, встроенные в качестве значений в родительский документ
9. Идентификатор объекта
   {"x" : ObjectId ()}
   Идентификатор объекта – это 12-байтовый идентификатор для документов
10. Двоичные данные
    это строка из произвольных байтов. Ими нельзя манипулировать из оболочки. Двоичные данные – единственный способ сохранять строки не в формате UTF-8 в базе данных.
11. Код
    {"x" : function() { /* ... */ }}
    MongoDB также позволяет хранить произвольный код JavaScript в запросах и документах

* Вставка
Чтобы вставить один документ, используйте метод коллекции =insertOne= (=insertOne= добавит в документ ключ "_id")
#+begin_src js
db.movies.insertOne({"title" : "Stand by Me"})
#+end_src
Если вам нужно вставить несколько документов - =insertMany=.
#+begin_src js
> db.movies.insertMany([
{"title" : "Ghostbusters"},
{"title" : "E.T."},
{"title" : "Blade Runner"}]);

> db.movies.find()
{ "_id" : ObjectId("572630ba11722fac4b6b4996"), "title" : "Ghostbusters" }
{ "_id" : ObjectId("572630ba11722fac4b6b4997"), "title" : "E.T." }
{ "_id" : ObjectId("572630ba11722fac4b6b4998"), "title" : "Blade Runner" }
#+end_src
Текущие версии MongoDB не принимают сообщения длиннее =48 МБ=, поэтому существует ограничение на количество, которое можно поместить в одну массовую вставку. Если вы попытаетесь вставить более 48 МБ, многие драйверы разделят вставку на несколько вставок по 48 МБ.

Есть флаг =ordered=. По умолчанию true. Если true, то при ошибке =insertMany= ничего не будет вставлено.
Если false, то будут вставлены документы, которые не вызвали ошибок.
#+begin_src js
> db.movies.insertMany([
... {"_id" : 3, "title" : "Sixteen Candles"},
... {"_id" : 4, "title" : "The Terminator"},
... {"_id" : 4, "title" : "The Princess Bride"}, // тут ошибка - будль id, только этот док не будет вставлен
... {"_id" : 5, "title" : "Scarface"}],
... {"ordered" : false})
#+end_src

* Удаление
Методы =deleteOne= и =deleteMany=
Чтобы удалить документ со значением ="_id"= , равным =4=, используем метод =deleteOne=
#+begin_src js
> db.movies.find()
{ "_id" : 0, "title" : "Top Gun"}
{ "_id" : 1, "title" : "Back to the Future"}
{ "_id" : 3, "title" : "Sixteen Candles"}
{ "_id" : 4, "title" : "The Terminator"}
{ "_id" : 5, "title" : "Scarface"}
> db.movies.deleteOne({"_id" : 4})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.movies.find()
{ "_id" : 0, "title" : "Top Gun"}
{ "_id" : 1, "title" : "Back to the Future"}
{ "_id" : 3, "title" : "Sixteen Candles"}
{ "_id" : 5, "title" : "Scarface"}
#+end_src

Если указанный фильтр соответствует нескольким документам, то =deleteOne= удалит только одну (первую) запись.

Всю коллекцию можно удалить методом =drop=
#+begin_src js
> db.movies.drop()
true
#+end_src

* Обновление
Методы =updateOne= и =updateMany= принимают документ фильтра в качестве первого параметра и документ модификатора, описывающий изменения, которые необходимо внести, в качестве второго параметра.
Метод =replaceOne= также принимает фильтр в качестве первого параметра, а в качестве второго параметра ожидает документ, которым он заменит документ, соответствующий фильтру.

=$inc= - оператор обновления (можно использовать только для значений типа integer, long, double или decimal)
#+begin_src js
> db.analytics.updateOne({"url" : "www.example.com"},
... {"$inc" : {"pageviews" : 1}})
#+end_src

=$set= - устанавливает (или создаёт) значение поля
#+begin_src js
> db.users.updateOne({"_id" : ObjectId("4b253b067525f35f94b60a31")},
... {"$set" : {"favorite book" : "War and Peace"}})
#+end_src

=$unset= - удаление поля
#+begin_src js
> db.users.updateOne({"name" : "joe"},
... {"$unset" : {"favorite book" : 1}})
#+end_src

Третьим параметром методов =updateMany= и =updateOne= является флаг =upsert= - Если не найден ни один документ, который соответствует фильтру, будет создан новый документ путем объединения критериев и обновленных документов.
#+begin_src js
> db.analytics.updateOne({"url" : "/blog"}, {"$inc" : {"pageviews" : 1}},
... {"upsert" : true})
#+end_src

=$setOnInsert= – это оператор, который устанавливает значение поля только при вставке документа.
#+begin_src js
> db.users.updateOne({}, {"$setOnInsert" : {"createdAt" : new Date()}},
... {"upsert" : true})
#+end_src

=findOneAndDelete=, =findOneAndReplace= и =findOneAndUpdate= - различие между этими методами и, например, методом =updateOne=
заключается в том, что они позволяют атомарно получить значение модифицированного документа. Документ возвращается до модификации, если не установлен флаг =returnNewDocument=
#+begin_src js
> db.processes.findOneAndUpdate({"status" : "READY"},
... {"$set" : {"status" : "RUNNING"}},
... {"sort" : {"priority" : -1},
... "returnNewDocument": true})
{
    "_id" : ObjectId("4b3e7a18005cab32be6291f7"),
    "priority" : 1,
    "status" : "RUNNING"
}
#+end_src

* Обновление массивов
=$push= добавляет элементы в конец массива
#+begin_src js
> db.blog.posts.updateOne({"title" : "A blog post"},
... {"$push" : {"comments" :
...
                {"name" : "joe", "email" : "joe@example.com",
...
                 "content" : "nice post."}}})
#+end_src

=$slice= - модификатор длинны массива
=$each= - сдвиг нескольких значений
=$sort= - сортировка
#+begin_src js
> db.movies.updateOne({"genre" : "horror"},
... {"$push" : {"top10" : {"$each" : [{"name" : "Nightmare on Elm Street",
...
                                       "rating" : 6.6},
...
                                      {"name" : "Saw", "rating" : 4.3}],
...
                           "$slice" : -10,
...
                           "$sort" : {"rating" : -1}}}})
#+end_src

=$ne= - отсутствие
#+begin_src js
> db.papers.updateOne({"authors cited" : {"$ne" : "Richie"}},
... {$push : {"authors cited" : "Richie"}})
#+end_src

=$addToSet= - добавление без дублирования
#+begin_src js
> db.users.findOne({"_id" : ObjectId("4b2d75476cc613d5ee930164")})
{
    "_id" : ObjectId("4b2d75476cc613d5ee930164"),
    "username" : "joe",
    "emails" : [
        "joe@example.com",
        "joe@gmail.com",
        "joe@yahoo.com"
    ]
}

> db.users.updateOne({"_id" : ObjectId("4b2d75476cc613d5ee930164")},
... {"$addToSet" : {"emails" : "joe@gmail.com"}})
#+end_src

=$pop= - удаление элемента из массива.
#+begin_src js
{"$pop" : {"key" : 1}} // удаляет элемент с конца
{"$pop" : {"key" : -1}} // удаляет его с начала
#+end_src

=$pull= используется для удаления элементов массива (всех совпадающих), соответствующих заданным критериям
#+begin_src js
> db.lists.insertOne({"todo" : ["dishes", "laundry", "dry cleaning"]})
> db.lists.updateOne({}, {"$pull" : {"todo" : "laundry"}})
#+end_src

позиционный оператор =$= - определяет, какому элементу массива соответствует документ запроса, и обновляет (только первое совпадение) этот элемент.
#+begin_src js
> db.blog.updateOne({"comments.author" : "John"},
... {"$set" : {"comments.$.author" : "Jim"}})
#+end_src

=arrayFilters= - позволяет изменять элементы массива, соответствующие конкретным критериям.
#+begin_src js
db.blog.updateOne(
{"post" : post_id },
{ $set: { "comments.$[elem].hidden" : true } },
{
    arrayFilters: [ { "elem.votes": { $lte: -5 } } ]
}
)
#+end_src
