#+title: Что Такое Rabbit Mq

Брокер сообщений — программное обеспечение и определённый архитектурный паттерн, который позволяет выстроить действия в информационных системах таким образом, чтобы обеспечить асинхронный обмен сообщениями между сервисами. Сервис, отправляющий данные, называется продюсер (producer), а потребляющий — потребитель (consumer).
Асинхронный обмен предполагает отправку запроса или сообщения от одного сервиса к другому, при этом деятельность сервиса-отправителя не приостанавливается в ожидании ответа от получателя.
Для обеспечения асинхронной доставки сообщений используется специальное программное обеспечение — брокер сообщений.

В использовании брокеров для интеграции приложений есть ряд преимуществ:
1. *Надёжность* — брокеры обеспечивают гарантированную доставку сообщений даже при сбоях в системах или их перегрузках. Также они учитывают порядок доставки и отслеживают её состояние.
2. *Масштабируемость* — брокеры имеют гибкую архитектуру, что позволяет эффективно масштабировать систему горизонтально или вертикально при необходимости обработки больших объемов данных.
3. *Асинхронность* — повышает производительность системы в целом, поскольку при асинхронном обмене сообщениями, различные компоненты системы работают независимо и обрабатывают их в своём темпе.
4. *Гибкость интеграции* — брокеры можно назвать универсальным инструментом интеграции систем, так как они поддерживают различные протоколы и форматы сообщений.

В настоящий момент брокеры часто используется в системах, предполагающих высокую нагрузку, доступность и производительность.

Задачи брокера:
1. Получить сообщение от сервиса.
2. Обеспечить маршрутизацию, управление очередями.
3. Гарантировать доставку сообщения потребителю.

* Что такое RabbitMQ и как он работает?
RabbitMQ — это один из популярных брокеров, который служит посредником для обмена информацией между различными системами. Он осуществляет передачу сообщений посредством очередей.
RabbitMQ основан на протоколе AMQP (Advanced Message Queuing Protocol).
Разумеется, RabbitMQ — не единственный подобный инструмент. Также стоит упомянуть ActiveMQ, IBM MQ и LanvinMQ.

Чтобы обеспечить асинхронный обмен между продюсером и потребителем, RabbitMQ использует следующие компоненты:
1. Exchange — точка обмена;
2. Queue — очередь;
3. Message — сообщение.

Рассмотрим пример, когда несколько приложений публикуют сообщения, отправляя их в RMQ. Все входящие сообщения в этом примере попадают в точку обмена «Preprocessing exchange» — это единая точка в рассматриваемой топологии. Дальше брокер осуществляет их маршрутизацию и здесь возможны варианты:
- Направить сообщение в какую-либо очередь;
- Направить его в другие точки обмена, которые уже будут связаны с очередями.

В конечном счёте, каждая очередь подключается к консьюмеру, которое читает эти сообщения и выполняет их дальнейшую обработку.
Среди прочих свойств, RabbitMQ часто приписывают свойство «проталкивать» сообщения потребителю. Для этого потребителю необходимо установить соединение, в рамках которого открывается канал взаимодействия и осуществляется транспортировка сообщений. Потребитель должен быть подписан на текущую очередь — это необходимое условие для доставки из неё.

* Очереди
В RabbitMQ они работают по принципу FIFO (First Input First Output). При конфигурации очереди можно задавать как обязательные, так и необязательные параметры. Каждая очередь должна иметь уникальное имя и свойства, которые будут определять её поведение.
Помимо имени в административной панели RabbitMQ можно установить параметр свойства «Durable» (устойчивость) — это свойство определяет, сохранится ли очередь после перезапуска брокера. Для того, чтобы очередь была устойчива к сбоям брокера, этот параметр должен иметь значение «True».
Ещё одно важное свойство «Auto delete» (автоудаление). Оно означает, что как только последний потребитель заканчивает читать сообщения из очереди, она удаляется.

* Точка обмена
Следующий объект брокера — точка обмена или обменник (Exchange). Все сообщения RabbitMQ, прежде чем попасть в очереди, публикуются в точке обмена брокера. Exchange принимает сообщения от приложения-производителя и направляет их в одну или несколько очередей на основе созданных связей между ним и очередью. В спецификации протокола AMQP, по которому работает RabbitMQ, существует несколько типов точек обмена, каждый со своей собственной семантикой маршрутизации.

Типы точек обмена:
1. Direct - Прямая отправка сообщений в одну или несколько очередей с совпадающим значением ключа маршрутизации. Когда есть точно известный ключ, по значению которого отдельные приложения-потребители должны получить подходящие сообщения
2. Fanout - Все сообщения отправляются во все очереди независимо от ключа маршрутизации. Когда все приложения-потребители должны быстро получать все сообщения.
3. Headers - Маршрутизация по нескольким атрибутам, заданным в заголовке сообщения. Ключ маршрутизации игнорируется. Когда правила маршрутизации сообщения в очереди сложнее, чем просто по ключу, например, формат данных, комбинация полей и пр.
4. Topic - Сообщение отправляется в конкретные очереди по значению ключа маршрутизации, заданного по шаблону. Когда ключ маршрутизации сложный и поток сообщений надо разделить по разным приложениям-потребителям.

* Сообщения
В структуре Сообщения можно выделить три основных блока:
- Attributes — заголовок;
- Payload — блок полезной нагрузки;
- Headers — заголовки сообщения, блок дополнительных атрибутов, участвующих в построении логики обработки и маршрутизации в топологиях брокера.

  Атрибуты сообщения:
1. Routing key — ключ маршрутизации, обязательная характеристика, которая позволяет обменнику типа Direct или Topic направить сообщение в очередь внутри брокера.
2. Headers — содержит дополнительную информацию для сложной маршрутизации и используется обменником типа Headers. Иногда может быть нужно выполнить маршрутизацию в зависимости от одного какого-то ключа. Чаще можно столкнуться с необходимостью выполнить проверку нескольких условий. Эти условия можно указать как атрибуты в поле заголовка (Headers) и затем использовать их в брокере для более сложной маршрутизации.
3. Properties — характеристики сообщений, наиболее важными из них являются тип (Content_type) и кодировка (Content_encoding).
4. Delivery mode — режим доставки, сохранение опубликованных сообщений до момента их передачи потребителю. Выделяют две разновидности режима доставки: Persistent — постоянная, то есть сохранение сообщений; Non-persistent — непостоянная, несохранение сообщений.

* Запуск RabbitMQ через Docker
Выполните следующую команду в терминале:
#+begin_src
docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management
#+end_src
Объяснение параметров:
=-d=: Запускает контейнер в фоновом режиме.
=--name rabbitmq=: Назначает имя контейнера (rabbitmq).
=-p 5672:5672=: Проброс порта AMQP (5672) для взаимодействия с RabbitMQ.
=-p 15672:15672=: Проброс порта HTTP (15672) для доступа к веб-интерфейсу управления RabbitMQ.
=rabbitmq:management=: Использует образ RabbitMQ с поддержкой веб-интерфейса управления.

Чтобы проверить, что контейнер запущен, выполните:
#+begin_src
docker ps
#+end_src
В выводе вы должны увидеть контейнер с именем =rabbitmq=.

RabbitMQ предоставляет удобный веб-интерфейс для управления очередями, пользователями и другими компонентами.
Откройте браузер и перейдите по адресу:
http://localhost:15672
Войдите с учетными данными по умолчанию:
Логин: guest
Пароль: guest

Остановка контейнера:
#+begin_src
docker stop rabbitmq
#+end_src
Удаление контейнера:
#+begin_src
docker rm rabbitmq
#+end_src

Дополнительные настройки:
 1. Создание пользователей
    По умолчанию пользователь guest доступен только из localhost. Для создания нового пользователя выполните:
#+begin_src
docker exec -it rabbitmq rabbitmqctl add_user myuser mypassword
docker exec -it rabbitmq rabbitmqctl set_user_tags myuser administrator
docker exec -it rabbitmq rabbitmqctl set_permissions -p / myuser ".*" ".*" ".*"
#+end_src
 2. Проброс данных в volume
    Если вам нужно сохранять конфигурацию и данные RabbitMQ между перезапусками контейнера, используйте volume:
#+begin_src
docker run -d --name rabbitmq \
  -p 5672:5672 -p 15672:15672 \
  -v rabbitmq_data:/var/lib/rabbitmq \
  rabbitmq:management
#+end_src
