#+title: Что Такое Rabbit Mq

Брокер сообщений — программное обеспечение и определённый архитектурный паттерн, который позволяет выстроить действия в информационных системах таким образом, чтобы обеспечить асинхронный обмен сообщениями между сервисами. Сервис, отправляющий данные, называется продюсер (producer), а потребляющий — потребитель (consumer).
Асинхронный обмен предполагает отправку запроса или сообщения от одного сервиса к другому, при этом деятельность сервиса-отправителя не приостанавливается в ожидании ответа от получателя.
Для обеспечения асинхронной доставки сообщений используется специальное программное обеспечение — брокер сообщений.

В использовании брокеров для интеграции приложений есть ряд преимуществ:
1. *Надёжность* — брокеры обеспечивают гарантированную доставку сообщений даже при сбоях в системах или их перегрузках. Также они учитывают порядок доставки и отслеживают её состояние.
2. *Масштабируемость* — брокеры имеют гибкую архитектуру, что позволяет эффективно масштабировать систему горизонтально или вертикально при необходимости обработки больших объемов данных.
3. *Асинхронность* — повышает производительность системы в целом, поскольку при асинхронном обмене сообщениями, различные компоненты системы работают независимо и обрабатывают их в своём темпе.
4. *Гибкость интеграции* — брокеры можно назвать универсальным инструментом интеграции систем, так как они поддерживают различные протоколы и форматы сообщений.

В настоящий момент брокеры часто используется в системах, предполагающих высокую нагрузку, доступность и производительность.

Задачи брокера:
1. Получить сообщение от сервиса.
2. Обеспечить маршрутизацию, управление очередями.
3. Гарантировать доставку сообщения потребителю.

* Что такое RabbitMQ и как он работает?
RabbitMQ — это один из популярных брокеров, который служит посредником для обмена информацией между различными системами. Он осуществляет передачу сообщений посредством очередей.
RabbitMQ основан на протоколе AMQP (Advanced Message Queuing Protocol).
Разумеется, RabbitMQ — не единственный подобный инструмент. Также стоит упомянуть ActiveMQ, IBM MQ и LanvinMQ.

Чтобы обеспечить асинхронный обмен между продюсером и потребителем, RabbitMQ использует следующие компоненты:
1. Exchange — точка обмена;
2. Queue — очередь;
3. Message — сообщение.

Рассмотрим пример, когда несколько приложений публикуют сообщения, отправляя их в RMQ. Все входящие сообщения в этом примере попадают в точку обмена «Preprocessing exchange» — это единая точка в рассматриваемой топологии. Дальше брокер осуществляет их маршрутизацию и здесь возможны варианты:
- Направить сообщение в какую-либо очередь;
- Направить его в другие точки обмена, которые уже будут связаны с очередями.

В конечном счёте, каждая очередь подключается к консьюмеру, которое читает эти сообщения и выполняет их дальнейшую обработку.
Среди прочих свойств, RabbitMQ часто приписывают свойство «проталкивать» сообщения потребителю. Для этого потребителю необходимо установить соединение, в рамках которого открывается канал взаимодействия и осуществляется транспортировка сообщений. Потребитель должен быть подписан на текущую очередь — это необходимое условие для доставки из неё.

* Базовая схема всех сущностей RabbitMQ
[[file:../att/queue1.png]]

Пробежимся по названиям слева направо:
 - =Publisher= — публикует сообщения в Rabbit.
   Создаёт соединение (connection) по протоколу AMQP, в рамках соединения создаёт канал (channel).
   В рамках одного соединения можно создать несколько каналов, но это не рекомендуется даже официальной документацией RabbitMQ.
   «Флаппинг» каналов: если Publisher для каждого сообщения создаёт соединение, канал, отправляет сообщение, закрывает канал, закрывает соединение, это очень плохая история. Rabbit становится плохо уже на ~300 таких пересозданий каналов в секунду.
   Publisher всегда пишет в exchange. Даже если вы думаете, что он пишет напрямую в очередь, это не так. Он пишет в служебный exchange с routing key, совпадающим с названием очереди.
   Publisher определяет Routing Key для каждого сообщения — признак, по которому идёт дальнейшая маршрутизация в Rabbit.
   Publisher определяет ~delivery_mode~ для каждого сообщения — так называемый «признак персистентности». Это значит, что сообщение будет сохранено на диске и не исчезнет в случае перезагрузки Rabbit.
   - delivery_mode=1 — не хранить сообщения, быстрее.
   - delivery_mode=2 — хранить сообщения на диске, медленнее, но надёжнее.
   Publisher может выставлять ~confirm~ флаг — отправлять указания Rabbitmq через отдельный канал подтверждения об успешной приёмке сообщений. Например, если у Rabbit закончится место на диске, то некоторое время он ещё будет принимать сообщения от Publisher. Publisher будет думать, что всё в порядке, хотя сообщения с высокой долей вероятности не дойдут до Consumer и не сохранятся в очереди для дальнейшей обработки. Полезная вещь, но ощутимо снижает скорость работы и сложно реализуема в однопоточных языках разработки.
 - =Exchange= — обменник. Сущность Rabbit, точка входа для публикации всех сообщений.
   *Неизменяемая сущность*: для изменения параметров Exchange нужно его удалять и декларировать заново.
   Рассылает сообщение во все очереди с подходящими binding (но не более одного сообщения в одну очередь, если есть несколько подходящих binding).
   Durable/Transient — признак персистентности Exchange. Durable означает, что exchange сохранится после перезагрузки Rabbit.
   Exchange не подразумевает хранения! Это не очередь. Если маршрут для сообщения не будет найден, сообщение сразу будет отброшено без возможности его восстановления.
 - =Binding= — связь между Exchange и очередью.
   *Неизменяемая сущность*: если нужно изменить binding, его удаляют и декларируют заново.
   Bindings между парой exchange-очередь может быть несколько, но только с разными параметрами.
 - =Queue= — очередь для хранения сообщений.
   В RabbitMQ они работают по принципу FIFO (First Input First Output).
   Хранение сообщений на диске (persistent) зависит от флага ~delivery_mode~, назначаемым publisher для каждого сообщения.
   Durable/Transient — признак персистентности очереди. Durable значит, что exchange сохранится после перезагрузки Rabbit.
   ~Важно~ понимать, что даже если вы отправили сообщения с признаком delivery_mode=2 (persistent), но очередь задекларирована не как Durable, то при перезагрузке Rabbit очередь и все содержащиеся в ней сообщения будут безвозвратно утрачены.
 - =Messages= — сообщение, атомарная сущность.
   Важные поля:
   - ~payload~ — полезная нагрузка, может быть как string, так и base64. Можно закидывать туда хоть картинки, но потом не надо удивляться огромным трафикам между сервисами. Теоретический лимит размера одного сообщения — 2Gb, но на практике рекомендуемый размер сообщения 128mb;
   - ~routing key~ — ключ маршрутизации, может быть только один для одного сообщения;
   - ~delivery_mode~ — признак персистентности;
   - ~headers~ — заголовки сообщения. Нужны для работы Exchange типа headers, а также для дополнительных возможностей Rabbit типа TTL.
 - =Consumer= — подписывается на очередь и получает от Rabbit сообщения.
    Так же, как и Publisher, Consumer создаёт соединение (connection) по протоколу AMQP. В рамках соединения создаёт канал (channel) и уже инициирует consuming в рамках этого канала.
    Consumer подписывается только на одну очередь. Если вы хотите получать сообщения из разных очередей, правильнее будет корректно смаршрутизировать их потоки в одну очередь, чем городить пулы Consumer внутри приложения.
    ~Prefetch count~ — важный параметр Consumer, обозначающий количество неподтверждённых Consumer сообщений в один момент. По умолчанию во многих библиотеках он равен 0 (по сути отключен). В такой ситуации Rabbit проталкивает все сообщения из очереди в Consumer, а тот во многих случаях при достаточном количестве сообщений просто отъезжает.
    Если нет понимания, какое значение ставить, лучше ставить «1» — пока Consumer не обработает одно сообщение, следующее к нему не поступит. Как только Rabbit подтвердит обработку, следующее сообщение будет получено незамедлительно.
    Consumer может подтвердить обработку сообщения — механизм Acknowledge (ack). Или вернуть сообщение в Queue при неудачной обработке — механизм Negative acknowledge (nack).

Типы Exchange:
- =Fanout=
  Exchange публикует сообщения во все очереди, в которых есть binding, игнорируя любые настройки binding (routing key или заголовки).
  Самый простой тип и наименее функциональный. ~Редко бывает нужен~. По скоростям выдает на тестах около 30000mps, но столько же выдает и тип Direct.
- =Direct=
  Exchange публикует сообщения во все очереди, в которых Routing Key binding полностью совпадает с Routing Key Messages.
  Наиболее популярный тип, по скорости сравнимый с fanout (на тестах не увидел разницы) и при этом обладающий необходимой гибкостью для большинства задач.
- =Topic=
  Тип Exchange, похожий на Direct, но поддерживающий в качестве параметров binding Wildcard * (совпадение одного слова ) и # (любое количество слов).
  Производительность топика на тестах показала скорости в три раза ниже fanaut/direct — не более 5000-10000mps
- =Headers=
  Наиболее гибкий, но наименее производительный тип. Скорости очень сильно зависят от сложности условий и поэтому труднопрогнозируемы. Оперирует не Routing key, а заголовками сообщений и binding. В binding указываются ожидаемые заголовки, а также признак x-match: x-match=all (необходимы все совпадения для попадания сообщения) или x-match=any (необходимо хотя бы одно совпадение).

Типы очередей:
- =Classic= — обычная очередь, используется в большинстве случаев.
- =Quorum= — аналог классической очереди, но с обеспечением гарантий консистентности, достигаемый кворумом в кластере.
- =Stream= — новый вид очередей (начиная с версии Rabbimq 3.9), пока ещё мало кем используемый, аналог принципов Apache Kafka.

Также встречаются термины:
- =Publishing= — процесс публикования сообщений в обменник.
- =Consuming= — процесс подписывания consumer на очередь и получение им сообщений.
- =Routing Key= — свойство Binding.
- =Persistent= — свойство сохранения данных при перезагрузке сервиса (также известное как стейт).

* Запуск RabbitMQ через Docker
Выполните следующую команду в терминале:
#+begin_src
docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management
#+end_src
Объяснение параметров:
=-d=: Запускает контейнер в фоновом режиме.
=--name rabbitmq=: Назначает имя контейнера (rabbitmq).
=-p 5672:5672=: Проброс порта AMQP (5672) для взаимодействия с RabbitMQ.
=-p 15672:15672=: Проброс порта HTTP (15672) для доступа к веб-интерфейсу управления RabbitMQ.
=rabbitmq:management=: Использует образ RabbitMQ с поддержкой веб-интерфейса управления.

Чтобы проверить, что контейнер запущен, выполните:
#+begin_src
docker ps
#+end_src
В выводе вы должны увидеть контейнер с именем =rabbitmq=.

RabbitMQ предоставляет удобный веб-интерфейс для управления очередями, пользователями и другими компонентами.
Откройте браузер и перейдите по адресу:
http://localhost:15672
Войдите с учетными данными по умолчанию:
Логин: guest
Пароль: guest

Остановка контейнера:
#+begin_src
docker stop rabbitmq
#+end_src
Удаление контейнера:
#+begin_src
docker rm rabbitmq
#+end_src

Дополнительные настройки:
 1. Создание пользователей
    По умолчанию пользователь guest доступен только из localhost. Для создания нового пользователя выполните:
#+begin_src
docker exec -it rabbitmq rabbitmqctl add_user myuser mypassword
docker exec -it rabbitmq rabbitmqctl set_user_tags myuser administrator
docker exec -it rabbitmq rabbitmqctl set_permissions -p / myuser ".*" ".*" ".*"
#+end_src
 2. Проброс данных в volume
    Если вам нужно сохранять конфигурацию и данные RabbitMQ между перезапусками контейнера, используйте volume:
#+begin_src
docker run -d --name rabbitmq \
  -p 5672:5672 -p 15672:15672 \
  -v rabbitmq_data:/var/lib/rabbitmq \
  rabbitmq:management
#+end_src

* Запуск RabbitMQ черех docker-compose
Запуск =RabbitMQ= через Docker Compose — это удобный способ настроить и запустить =RabbitMQ= с минимальными усилиями, особенно если вам нужно интегрировать его с другими сервисами.
1. Создайте файл =docker-compose.yml= в рабочем каталоге
 #+begin_src
version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    hostname: rabbitmq # имя сервера
    ports:
      - "5672:5672" # AMQP порт для клиентских подключений
      - "15672:15672" # HTTP порт для веб-интерфейса управления
    environment:
      RABBITMQ_DEFAULT_USER: guest       # Имя пользователя (по умолчанию)
      RABBITMQ_DEFAULT_PASS: guest       # Пароль пользователя (по умолчанию)
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq # Для сохранения данных между перезапусками
 #+end_src

 Объяснение конфигурации
- image: rabbitmq:management
  Используется официальный образ RabbitMQ с поддержкой веб-интерфейса управления (management).
- ports
  5672: AMQP порт для клиентских подключений.
  15672: HTTP порт для доступа к веб-интерфейсу управления.
- environment
  RABBITMQ_DEFAULT_USER и RABBITMQ_DEFAULT_PASS: Настройка учетных данных для входа в RabbitMQ. По умолчанию используется guest:guest.
- volumes
  ./rabbitmq:/var/lib/rabbitmq: Сохраняет данные RabbitMQ в volume Docker, чтобы они не пропадали при перезапуске контейнера.

2. В той же директории, где находится файл docker-compose.yml, выполните следующую команду:
#+begin_src
docker-compose up -d
#+end_src
=-d=: Запускает контейнеры в фоновом режиме.

3. Остановка и удаление контейнера
Остановка:
#+begin_src
docker-compose down
#+end_src
Эта команда остановит и удалит контейнер, но данные в volume останутся сохранными.

Удаление volume (если нужно очистить данные):
#+begin_src
docker volume rm $(docker volume ls -q -f name=rabbitmq_data)
#+end_src

* Пример отправки сообщений
#+begin_src go
package main

import (
	"time"

	"github.com/streadway/amqp"
)

func main() {
	// Подключение к RabbitMQ
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	if err != nil {
		panic(err)
	}
	defer conn.Close()

	// Создание канала
	ch, err := conn.Channel()
	if err != nil {
		panic(err)
	}
	defer ch.Close()

	// Объявление очереди (если она не существует)
	queryName := "qname"
	_, err = ch.QueueDeclare(
		queryName, // имя очереди
		true,  // durable (очередь сохраняется после перезапуска RabbitMQ)
		false, // delete when unused
		false, // exclusive
		false, // no-wait
		nil)

	if err != nil {
		panic(err)
	}

	err = ch.Publish(
		"", // exchange
		queryName, // routing key (имя очереди)
		false, // mandatory
		false, // immediate
		amqp.Publishing{ContentType: "text/plain",
			DeliveryMode: amqp.Persistent,
			Body:         []byte("hello hello")})

	if err != nil {
		panic(err)
	}

	time.Sleep(2 * time.Second)
}
#+end_src

* Пример потребления сообщений
#+begin_src go
package main

import (
	"context"
	"log"
	"time"

	"github.com/streadway/amqp"
)

func main() {
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	if err != nil {
		panic(err)
	}
	defer conn.Close()

	ch, err := conn.Channel()
	if err != nil {
		panic(err)
	}
	defer ch.Close()

	queryName := "qname"
	msgs, err := ch.Consume(
		queryName, // имя очереди
		"",        // consumer tag
		true,      // auto-ack
		false,     // exclusive
		false,     // no-local
		false,     // no-wait
		nil,       // args
	)

	if err != nil {
		panic(err)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()
	go func(ctx context.Context) {
		for msg := range msgs {
			select {
			case <-ctx.Done():
				log.Print("finish.")
				return
			default:
				log.Printf("message: %s", msg.Body)
			}
		}
	}(ctx)

	time.Sleep(4 * time.Second)
}
#+end_src
