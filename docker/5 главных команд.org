#+title: 5 Главных Команд

Тебе не нужно знать все команды Docker, чтобы начать им пользоваться. Достаточно этих пяти:

1. =docker build= — собрать образ
2. =docker run= — запустить контейнер
3. =docker ps= — посмотреть, что работает
4. =docker stop= — остановить контейнер
5. =docker logs= — найти ошибку

1. docker build – создание образа
   Допустим, у тебя есть Dockerfile (маленький скрипт, который объясняет Docker, как собрать приложение). Чтобы превратить его в готовый образ, просто выполни:
   #+begin_src
   docker build -t my-cool-app .
   #+end_src
   , где:
   • =t my-cool-app= — даём образу имя.
   • =.= — говорим Docker искать Dockerfile в текущей папке.

2. docker run – запуск
   Теперь, когда образ готов, его можно запустить:
   #+begin_src
   docker run -p 9090:8080 -d my-cool-app
   #+end_src
   , где:
   • =p 9090:8080= — связывает порт внутри контейнера с портом снаружи (например, твоё приложение слушает порт 8080, а ты хочешь обращаться к контейнеру по 9090).
   • =-d= — запускает контейнер в фоне, чтобы не забивать терминал.

3. docker ps – список запущенных контейнеров
   #+begin_src
   docker ps
   #+end_src
   Вывод:
   • ID контейнера — чтобы его остановить или удалить.
   • Статус — работает или уже "помер".
   • Порты — куда прокинуты.

   Хочешь увидеть все контейнеры, даже остановленные
  #+begin_src
  docker ps -a
  #+end_src

4. docker stop – остановка контейнера
   #+begin_src
   docker stop <CONTAINER_ID>
   #+end_src

  Где взять CONTAINER_ID? Из вывода docker ps, конечно!
  #+begin_src
  docker stop $(docker ps -q --filter ancestor=my-cool-app)
  #+end_src
   1. =docker ps -q --filter ancestor=my-cool-app=:
     • docker ps - показывает работающие контейнеры
     • -q - выводит только ID контейнеров (quiet mode)
     • -filter ancestor=my-cool-app - фильтрует контейнеры, оставляя только те, которые были созданы из образа my-cool-app
   2. =docker stop $(...)=:
      • docker stop - останавливает контейнер(ы)
      • $(...) - подставляет результат выполнения команды в скобках как аргументы

5. docker logs – логи
   Твоё приложение упало, а в терминале просто Exited (1). Как понять, что пошло не так?
   #+begin_src
   docker logs <CONTAINER_ID>
   #+end_src

   следить за логами в реальном времени:
   #+begin_src
   docker logs -f <CONTAINER_ID>
   #+end_src
