#+title: docker

=Docker= — это платформа, которая предназначена для разработки, развёртывания и запуска приложений в контейнерах.
Он позволяет отделить приложения от инфраструктуры и управлять инфраструктурой по аналогии с тем, как мы управляем приложениями.
=Docker= предоставляет возможность упаковывать и запускать приложение в слабо изолированной среде - =контейнере=. Изоляция и безопасность позволяют одновременно запускать несколько контейнеров на одном хосте (хостом может быть наша локальная машина, дата центр, облачный провайдер или их микс).
=Контейнеры= являются легковесными и содержат все необходимое для запуска приложения, что избавляет нас от необходимости полагаться на то, что установлено на хосте.

* Для чего Docker может использоваться?
+ Быстрая и согласованная доставка приложений
  =Docker= рационализирует жизненный цикл разработки, позволяя разработчикам работать в стандартизированной среде через локальные контейнеры, предоставляющие приложения и сервисы. =Контейнеры= отлично подходят для рабочих процессов непрерывной интеграции и непрерывной доставки (continuous integration/continuous delivery, CI/CD).

+ Отзывчивая разработка и масштабирование
  Платформа, основанная на =контейнерах=, позволяет легко портировать приложения. =Контейнеры= могут запускаться на локальной машине разработчика, в физических или виртуальных дата-центрах, облачных провайдерах или смешанных средах.

+ Запуск большего количества приложений на одной машине
  =Docker= является легковесным и быстрым. Он предоставляет работоспособную и экономичную альтернативу виртуальным машинам на основе гипервизора, что позволяет использовать больше вычислительных мощностей для решения аналогичных задач.

* Архитектура Docker
=Docker= использует клиент-серверную архитектуру. =Клиент= (=Docker client=) обращается к =демону= (=Docker daemon=), который поднимает (собирает), запускает и распределяет =контейнеры=. Клиент и демон могут быть запущены в одной системе или клиент может быть подключен к удаленному демону. Клиент и демон общаются через =REST API= поверх UNIX-сокетов или сетевого интерфейса. Другим клиентом является =Docker Compose=, позволяющий работать с приложениями, состоящими из нескольких контейнеров.

** Демон
=Демон= (=dockerd=) регистрирует (слушает) запросы, поступающие от =Docker API=, и управляет такими объектами как образы, контейнеры, сети и тома. Демон может общаться с другими демонами для управления сервисами.

** Клиент
=Клиент= (=docker=) - основной способ коммуникации с =Docker=. При выполнении такой команды, как =docker run=, клиент отправляет эту команду демону, который, собственно, эту команду и выполняет. Команда =docker= использует =Docker API=. Клиент может общаться с несколькими демонами.

** Docker Desktop
=Docker Desktop= - это десктопное приложение для Mac, Windows и Linux, позволяющее создавать и распределять контейнерные приложения и микросервисы. =Docker Desktop= включает в себя демона, клиента, Docker Compose, Docker Content Trust, Kubernetes и Credential Helper.

** Реестр
В =реестре= (=registry=) хранятся образы контейнеров. =Docker Hub= - это публичный реестр, который (по умолчанию) используется =Docker= для получения образов. Имеется возможность создания частных (закрытых) реестров.
При выполнении таких команд, как =docker pull= или =docker run=, необходимые образы загружаются из настроенного реестра. А при выполнении команды =docker push= образ загружается в реестр.

* Объекты
При использовании =Docker= мы создаем и используем =образы=, =контейнеры=, =сети=, =тома=, =плагины= и другие объекты. Рассмотрим некоторые из них.
** Образы (Images)
=Образ= - это доступный только для чтения шаблон с инструкциями по созданию контейнера. Часто образ представляет собой модификацию другого образа.
Можно создавать свои образы или использовать образы, созданные другими и опубликованные в =реестре=. Для создания образа используется =Dockerfile=, содержащий инструкции по созданию образа и его запуску (см. ниже). Ряд инструкций в =Dockerfile= приводит к созданию в образе нового =слоя= (раньше новый слой создавался для каждой инструкции). При изменении =Dockerfile= и повторной сборке образа пересобираются только модифицированные слои. Это делает образы легковесными, маленькими и быстрыми.

** Контейнеры (Containers)
=Контейнер= - это запускаемый =экземпляр образа=. Мы создаем, запускаем, перемещаем и удаляем контейнеры с помощью =Docker API= или =CLI= (command line interface, интерфейс командной строки). Мы можем подключать контейнеры к сетям, добавлять в них хранилища данных и даже создавать новые образы на основе текущего состояния.
По умолчанию контейнеры хорошо =изолированы= от других контейнеров и хоста. Однако мы можем управлять тем, насколько изолированы сеть, хранилище данных или другая подсистема контейнера.
Контейнер определяется образом и настройками, указанными при его создании и запуске. При удалении контейнера его состояние также удаляется. Этого можно избежать с помощью хранилища данных.

* Команды и флаги
