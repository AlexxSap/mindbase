#+title: Тэги

В Go теги (tags) для тестов — это мощный механизм, который позволяет организовать и управлять выполнением тестов в зависимости от их назначения или окружения.
Теги позволяют разработчикам маркировать тесты определённым образом, чтобы запускать только те тесты, которые соответствуют заданным условиям.
Это особенно полезно в больших проектах, где тесты могут быть разделены на категории, такие как модульные тесты, интеграционные тесты или тесты для конкретных платформ.

* Как работают теги
Теги указываются в комментариях перед функцией теста с помощью специального синтаксиса =//go:build= или устаревшего синтаксиса =// +build=.
С версии Go 1.17 рекомендуется использовать //go:build.
Тесты с тегами можно запускать или игнорировать с помощью флага =-tags= при выполнении команды =go test=.

* Определение тегов
Теги указываются в комментариях перед функцией теста
#+begin_src go
//go:build integration

package myapp

import "testing"

func TestDatabaseConnection(t *testing.T) {
    // Тест подключения к базе данных
}
#+end_src
Здесь тест помечен тегом integration, что означает, что он относится к интеграционным тестам.

* Запуск тестов с определёнными тегами
Чтобы запустить тесты с определёнными тегами, используйте флаг =-tags=:
#+begin_src go
go test -tags=integration ./...
#+end_src
Эта команда запустит только те тесты, которые помечены тегом integration.

* Исключение тестов с определёнными тегами
Чтобы исключить тесты с определёнными тегами, используйте оператор =!=:
#+begin_src go
go test -tags=!integration ./...
#+end_src
Эта команда запустит все тесты, кроме тех, которые помечены тегом integration.

* Комбинирование тегов
Теги можно комбинировать с помощью логических операторов =&&= (И), =||= (ИЛИ) и =!= (НЕ).
#+begin_src go
//go:build unit || integration

func TestExample(t *testing.T) {
    // Этот тест будет выполнен, если указаны теги "unit" или "integration"
}
#+end_src
Запуск:
#+begin_src go
go test -tags="unit integration" ./...
#+end_src

* Использование тегов для разных окружений
Теги часто используются для разделения тестов по окружению, например, для тестирования на разных операционных системах или архитектурах.
#+begin_src go
//go:build linux

func TestLinuxSpecificFeature(t *testing.T) {
    // Тест, специфичный для Linux
}

//go:build darwin

func TestMacOSSpecificFeature(t *testing.T) {
    // Тест, специфичный для macOS
}
#+end_src
Запуск тестов для Linux:
#+begin_src go
go test -tags=linux ./...
#+end_src

Запуск тестов для macOS:
#+begin_src go
go test -tags=darwin ./...
#+end_src

* Использование теги для бенчмарков
Теги также можно применять к бенчмаркам. Например, если у вас есть бенчмарки, которые требуют больше ресурсов, вы можете пометить их тегом performance.
#+begin_src go
//go:build performance

func BenchmarkHeavyOperation(b *testing.B) {
    for i := 0; i < b.N; i++ {
        HeavyOperation()
    }
}
#+end_src
Запуск бенчмарков с тегом performance:
#+begin_src go
go test -tags=performance -bench=. ./...
#+end_src

* Рекомендации по использованию тегов
1. Именование тегов : Используйте понятные и логичные имена для тегов, такие как =unit=, =integration=, =e2e=, =performance=, =windows=, =linux=.
2. Группировка тестов : Разделяйте тесты по категориям, чтобы упростить управление их выполнением.
3. Автоматизация : Используйте Makefile или скрипты для автоматизации запуска тестов с разными тегами.
4. Документация : Документируйте использование тегов в вашем проекте, чтобы другие разработчики знали, как их использовать.
