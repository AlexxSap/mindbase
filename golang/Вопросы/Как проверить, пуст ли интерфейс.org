#+title: Как проверить, пуст ли интерфейс (interface{}) в Go?

В Go интерфейс считается пустым, только если оба его компонента (динамическое значение и тип) равны nil. Однако есть нюансы, о которых стоит знать.

1. Прямая проверка на =nil=
Если интерфейс действительно пустой (значение и тип =nil=), проверка на =nil= вернет =true=.
#+begin_src go
var i interface{}
if i == nil {
    fmt.Println("Интерфейс пустой")
}
#+end_src

2. Проблема с =nil= и типом
Если интерфейс содержит =nil= с типом (например, =*int=), он не будет считаться пустым.
#+begin_src go
var i interface{} = (*int)(nil)
if i == nil {
    fmt.Println("Пустой") // Не выполнится
} else {
    fmt.Println("Не пустой") // Вывод: Не пустой
}
#+end_src

3. Проверка через =reflect=
Для точной проверки используйте пакет =reflect=:
#+begin_src go
import "reflect"

func isEmptyInterface(i interface{}) bool {
    return i == nil || reflect.ValueOf(i).IsZero()
}
#+end_src

Итог:
- Используйте прямую проверку с =nil= для простых случаев.
- Для значений =nil= с типом — добавьте проверку через =reflect=.
- Не забывайте, что интерфейс с типом, но =nil=-значением, не считается пустым.
