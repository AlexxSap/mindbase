#+title: API Gateway

Шлюз служит посредником между клиентами и бэк-сервисами. Это единая точка входа для всех клиентских запросов.

* Функции
+ =Унификация=
То есть предоставление единого интерфейса для всех сервисов. Это упрощает жизнь разработчикам, так как им не нужно разбираться с каждой отдельной интеграцией, все сервисы можно подключать по одному и тому же принципу. Также все изменения и обновления можно применить централизованно, в одном месте.

+ =Маршрутизация=
В случае маршрутизации мы должны знать, что есть вот такие сервисы, у них вот такие url и работают по таким правилам. Здесь ещё подойдёт термин балансировка, когда мы знаем, что таких сервисов больше, чем один, и между ними хорошо было бы балансировать нагрузку.

+ =Валидация=
Валидация нужна для проверки в запросе всех необходимых параметров. Это помогает сразу отсеять неподходящие запросы и не тратить ресурсы на их обработку.

+ =Авторизация и Аутентификация=
Почему хорошо иметь аутентификацию в единой точке, в API Gateway? В этом предложении уже есть ответ на вопрос — единая точка. Сервисам больше не нужно думать об этом, у них есть это из коробки. То есть у нас идет проверка: можно ли этому инициатору запроса исполняться в бизнес-сервере или нет.

+ =Трассировка запросов=
В системе возможна логика, которая рискует перерасти в рекурсию. Это может быть нормальным с точки зрения бизнеса, но не нормальным с точки зрения жизни запроса. Важно помнить, что прохождение запроса должно иметь лимит: нельзя, чтобы запрос бесконечно гулял по экосистеме.

+ =Логирование=
Логирование позволяет отслеживать каждый запрос в системе. Когда происходит сбой, логи помогают понять, в каком звене цепочки он произошёл. Это значительно упрощает устранение проблемы и повышает надёжность системы, улучшает качество обслуживания и позволяет своевременно выявлять узкие места. Поэтому логирование — не просто формальность, а важный инструмент для стабильной работы системы.

+ =Стандартизация=
Каждый запрос нужно привести к единому стандарту. Представьте, что у нас разные клиенты присылают запросы с разными наборами данных, но наши сервисы ожидают определенный формат. API Gateway может автоматически отсеять ненужные данные. Или наоборот, добавить недостающие параметры: текущую дату или информацию о пользователе.

+ =Протоколирование=
В текущем мире существует множество протоколов. Если мы говорим об AGW как о возможности работать с любым API, то по-хорошему он должен уметь поддерживать разные протоколы.

+ =Квотирование запросов=
В случае, когда мы исчерпали лимит запросов к сервису, может быть 2 ситуации: мы прекращаем обслуживание, и это может быть нормально, но не для всех систем, либо мы просто замедляем входящий запрос. Оба варианта жизнеспособные, нужно смотреть на контекст. То есть квотирование помогает сделать так, чтобы сервисы не упали под нагрузкой.

* Плюсы и минусы
=Основной плюс= у AGW: меньше разработки. Представим, у вас есть определённое количество команд и каждая делает свою авторизацию. Естественно, она тратит на это время. Когда у вас появляется одна централизованная, команды об этом больше не задумываются и занимаются своим делом.
Это =лучший контроль=, особенно если у вас очень много сервисов, вы начинаете понимать, прикручивая логирование, трассировку, то, как у вас живут запросы, там появляются точки оптимизации.

=Минусы= AGW: это сложно. Многие знают про готовые решения, но в реальности они требуют доработки. Также этот паттерн сложно интегрировать в уже готовые системы, потому что внедрение потребует времени.

* Когда использовать?
На этой ноте мы подходим к важному вопросу: когда действительно пора задуматься о том, что надо выделить команду и представить AGW.
=Первая причина=: когда проект разрастается до значительных масштабов. Становится неэффективно, чтобы каждая команда повторно разрабатывала одни и те же функции. Это и лишние усилия, и риск появления ошибок. API Gateway берёт эти задачи на себя.
Если у вас в системе =огромное количество= микросервисов, важно эффективно управлять их взаимодействием. API Gateway может помочь упорядочить и оптимизировать маршрутизацию запросов, централизованно управлять этим процессом.
Не всегда очевидно, но иногда использование API Gateway может быть =экономически выгоднее=, чем реализация проекта без него. Вместо разработки и поддержки отдельных решений для каждой задачи вы можете использовать API Gateway.

* Когда не использовать?
Если ваш проект =не отличается большим масштабом=, API Gateway может быть излишним. В небольших проектах унификация функций не является критичной задачей, и добавление API Gateway только увеличит сложность и потребует дополнительных ресурсов на настройку и обслуживание.
Если ваш проект =небольшой или построен на монолитной архитектуре=. В таких случаях добавление дополнительного уровня инфраструктуры усложняет проект без явных преимуществ. Проще и эффективнее управлять сервисами напрямую. А монолитные системы обычно имеют централизованную структуру, что минимизирует необходимость в API Gateway.
Внедрение и обслуживание API Gateway требует затрат, как финансовых, так и временных. Если =проект ограничен в ресурсах=, может быть разумнее потратить их на другие критические задачи.
