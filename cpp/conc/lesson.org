#+title: Многопоточность на С++

ссылка на [[https://en.cppreference.com/w/cpp/thread][cppreference]]

* Конкурентность и параллелизм
=Конкурентность= означает, что несколько задач выполняются одновременно, но не обязательно одновременно на физическом уровне (на разных процессорах или ядрах). Задачи могут быть переключены между собой, чтобы дать иллюзию одновременного выполнения.
=Параллелизм= означает фактическое одновременное выполнение нескольких задач на разных физических ресурсах, таких как множество процессоров или ядер в многоядерной системе. При использовании параллелизма, задачи действительно выполняются одновременно и могут значительно увеличить производительность приложения.
Основное отличие между =конкуренцией= и =параллелизмом= заключается в том, что конкуренция описывает способность системы обрабатывать множество задач одновременно, независимо от физического параллелизма.

* Процесс и поток
=Поток= — это процедура выполнения на процессоре (в рамках какого-то =процесса=) набора инструкций, программного кода. Его назначение — параллельное выполнение на процессоре двух или более различных задач. Все =потоки= в =процессе= разделяют его адресное пространство.
=Процесс= — это абстракция, которая инкапсулирует в себе все ресурсы процесса и их дескрипторы, потоки и т.д. Каждый процесс имеет как минимум один поток.

* std::execution
Единый фреймворк асинхронности и параллелизма.
В С++26 обещают развить это во что-то [[https://en.cppreference.com/w/cpp/execution][страшно большое]] . Но сейчас есть только работа этой штуки в алгоритмах на коллекциях.

Есть 4 варианта - =seq=, =par=, =par_unseq=, =unseq=.

** Пример 1
#+begin_src cpp
std::for_each(std::execution::par, std::begin(container), std::end(container), [](){...});
#+end_src

** Пример 2
*** TODO: вставить пример отсюда https://en.cppreference.com/w/cpp/algorithm/execution_policy_tag

* Потоки
** std::tread
** threads managing

* Атомики
** std::atomic
** atomic operations

* Синхронизация выполнения
** mutual exclusion
** condition variables
** semaphores
** futures
* Частые ошибки
